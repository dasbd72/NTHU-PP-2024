[1mdiff --git a/src/ucp/core/ucp_worker.c b/src/ucp/core/ucp_worker.c[m
[1mindex 5adcee9..da860f4 100644[m
[1m--- a/src/ucp/core/ucp_worker.c[m
[1m+++ b/src/ucp/core/ucp_worker.c[m
[36m@@ -1765,6 +1765,7 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
 {[m
     const ucp_ep_config_key_t *key = &ucs_array_elem(&worker->ep_config,[m
                                                      cfg_index).key;[m
[32m+[m[32m    ucp_config_t *config           = NULL;[m
     ucp_context_h context          = worker->context;[m
     UCS_STRING_BUFFER_ONSTACK(strb, 256);[m
     ucp_lane_map_t tag_lanes_map    = 0;[m
[36m@@ -1777,6 +1778,12 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
     int amo_emul                    = 0;[m
     int num_valid_lanes             = 0;[m
     ucp_lane_index_t lane;[m
[32m+[m[32m    ucs_status_t status;[m
[32m+[m
[32m+[m[32m    status = ucp_config_read(NULL, NULL, &config);[m
[32m+[m[32m    if (status != UCS_OK) {[m
[32m+[m[32m        return;[m
[32m+[m[32m    }[m
 [m
     ucp_ep_config_name(worker, cfg_index, &strb);[m
 [m
[36m@@ -1853,6 +1860,8 @@[m [mucp_worker_print_used_tls(ucp_worker_h worker, ucp_worker_cfg_index_t cfg_index)[m
     ucs_string_buffer_rtrim(&strb, "; ");[m
 [m
     ucs_info("%s", ucs_string_buffer_cstr(&strb));[m
[32m+[m[32m    ucp_config_print(config, stdout, NULL, UCS_CONFIG_PRINT_TLS);[m
[32m+[m[32m    fprintf(stdout, "%s\n", ucs_string_buffer_cstr(&strb));[m
 }[m
 [m
 static ucs_status_t ucp_worker_init_mpools(ucp_worker_h worker)[m
[1mdiff --git a/src/ucs/config/parser.c b/src/ucs/config/parser.c[m
[1mindex a13d508..ff91f6f 100644[m
[1m--- a/src/ucs/config/parser.c[m
[1m+++ b/src/ucs/config/parser.c[m
[36m@@ -1850,6 +1850,17 @@[m [mucs_config_parser_print_opts_recurs(FILE *stream, const void *opts,[m
     }[m
 }[m
 [m
[32m+[m[32mstatic void ucs_config_parser_print_tls_opts(FILE *stream, const void *opts,[m
[32m+[m[32m                                            ucs_config_field_t *fields)[m
[32m+[m[32m{[m
[32m+[m[32m    void *sub_opts;[m
[32m+[m[32m    char tls_value[128];[m
[32m+[m
[32m+[m[32m    sub_opts = UCS_PTR_BYTE_OFFSET(opts, fields->offset);[m
[32m+[m[32m    ucs_config_parser_get_value(sub_opts, fields, "TLS", tls_value, sizeof(tls_value));[m
[32m+[m[32m    fprintf(stream, "UCX_TLS=%s\n", tls_value);[m
[32m+[m[32m}[m
[32m+[m
 void ucs_config_parser_print_opts(FILE *stream, const char *title, const void *opts,[m
                                   ucs_config_field_t *fields, const char *table_prefix,[m
                                   const char *prefix, ucs_config_print_flags_t flags)[m
[36m@@ -1878,8 +1889,8 @@[m [mvoid ucs_config_parser_print_opts(FILE *stream, const char *title, const void *o[m
     }[m
 [m
     // TODO: PP-HW-UCX[m
[31m-    if (flags /*& UCS_CONFIG_PRINT_TLS*/) {[m
[31m-[m
[32m+[m[32m    if (flags & UCS_CONFIG_PRINT_TLS) {[m
[32m+[m[32m        ucs_config_parser_print_tls_opts(stream, opts, fields);[m
     }[m
 [m
     if (flags & UCS_CONFIG_PRINT_HEADER) {[m
[1mdiff --git a/src/ucs/config/types.h b/src/ucs/config/types.h[m
[1mindex c300a6b..8206a34 100644[m
[1m--- a/src/ucs/config/types.h[m
[1m+++ b/src/ucs/config/types.h[m
[36m@@ -90,7 +90,8 @@[m [mtypedef enum {[m
     UCS_CONFIG_PRINT_HEADER          = UCS_BIT(1),[m
     UCS_CONFIG_PRINT_DOC             = UCS_BIT(2),[m
     UCS_CONFIG_PRINT_HIDDEN          = UCS_BIT(3),[m
[31m-    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4)[m
[32m+[m[32m    UCS_CONFIG_PRINT_COMMENT_DEFAULT = UCS_BIT(4),[m
[32m+[m[32m    UCS_CONFIG_PRINT_TLS             = UCS_BIT(5),[m
 } ucs_config_print_flags_t;[m
 [m
 [m
